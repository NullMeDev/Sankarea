#!/bin/bash
# test_sankarea.sh - Script to test Sankarea Discord bot functionality

# Set script to exit on error
set -e

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Starting Sankarea bot tests...${NC}"

# Check if .env file exists
if [ ! -f .env ]; then
    echo -e "${RED}Error: .env file not found!${NC}"
    echo "Please create a .env file with your configuration."
    exit 1
fi

# Load environment variables
echo "Loading environment variables..."
export $(grep -v '^#' .env | xargs)

# Check required environment variables
required_vars=("DISCORD_BOT_TOKEN" "DISCORD_GUILD_ID" "DISCORD_APPLICATION_ID" "DISCORD_CHANNEL_ID")
for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        echo -e "${RED}Error: $var is not set in .env file!${NC}"
        exit 1
    fi
done

# Check if config files exist
if [ ! -f config/config.json ]; then
    echo -e "${RED}Error: config/config.json not found!${NC}"
    exit 1
fi

if [ ! -f config/sources.yml ]; then
    echo -e "${RED}Error: config/sources.yml not found!${NC}"
    exit 1
fi

# Create data directory if it doesn't exist
mkdir -p data

# Check if state.json exists, create with defaults if not
if [ ! -f data/state.json ]; then
    echo "Creating default state.json..."
    echo '{
  "paused": false,
  "lastDigest": "1970-01-01T00:00:00Z",
  "lastInterval": 15,
  "lastError": "",
  "newsNextTime": "1970-01-01T00:00:00Z",
  "feedCount": 0,
  "lockdown": false,
  "lockdownSetBy": "",
  "version": "1.0.0",
  "startupTime": "1970-01-01T00:00:00Z",
  "errorCount": 0
}' > data/state.json
fi

# Test building the bot
echo "Testing build..."
cd cmd/sankarea
go build -o sankarea_test
if [ $? -eq 0 ]; then
    echo -e "${GREEN}Build successful!${NC}"
else
    echo -e "${RED}Build failed!${NC}"
    exit 1
fi

# Test RSS feed parsing
echo "Testing RSS feed parsing..."
echo "package main

import (
    \"fmt\"
    \"io/ioutil\"
    \"os\"
    
    \"github.com/mmcdole/gofeed\"
    \"gopkg.in/yaml.v2\"
)

type Source struct {
    Name   string \`yaml:\"name\"\`
    URL    string \`yaml:\"url\"\`
    Bias   string \`yaml:\"bias\"\`
    Active bool   \`yaml:\"active\"\`
}

func main() {
    b, err := ioutil.ReadFile(\"../../config/sources.yml\")
    if err != nil {
        fmt.Printf(\"Error reading sources: %v\\n\", err)
        os.Exit(1)
    }
    
    var sources []Source
    if err := yaml.Unmarshal(b, &sources); err != nil {
        fmt.Printf(\"Error parsing sources: %v\\n\", err)
        os.Exit(1)
    }
    
    fmt.Printf(\"Found %d sources\\n\", len(sources))
    
    fp := gofeed.NewParser()
    successCount := 0
    
    for _, src := range sources {
        if !src.Active {
            continue
        }
        fmt.Printf(\"Testing %s... \", src.Name)
        feed, err := fp.ParseURL(src.URL)
        if err != nil {
            fmt.Printf(\"FAILED: %v\\n\", err)
            continue
        }
        fmt.Printf(\"OK (%d items)\\n\", len(feed.Items))
        successCount++
    }
    
    fmt.Printf(\"\\nSummary: %d/%d feeds working\\n\", successCount, len(sources))
    if successCount < len(sources) {
        os.Exit(1)
    }
}" > rss_test.go

go run rss_test.go
if [ $? -eq 0 ]; then
    echo -e "${GREEN}RSS feed tests passed!${NC}"
else
    echo -e "${RED}Some RSS feeds failed to parse. Check the output above.${NC}"
    echo "You may want to update your sources.yml file."
fi

# Clean up
rm rss_test.go
rm sankarea_test
cd ../..

echo -e "${GREEN}All tests completed!${NC}"
